#include "swap.h"
u16 last_swap_swap = 0;

SWAP_STA_TYPE swap_str;
const unsigned int CAN_baud_table[CAN_BAUD_NUM][5] = 
{
//波特率， CAN_SJW，   CAN_BS1，    CAN_BS2，CAN_Prescaler 
	{5,   CAN_SJW_1tq,CAN_BS1_13tq,CAN_BS2_2tq,450},		//未通			
	{10,  CAN_SJW_1tq,CAN_BS1_6tq,CAN_BS2_2tq, 400},		//未通			
	{15,  CAN_SJW_1tq,CAN_BS1_13tq,CAN_BS2_2tq,150},		//15K  未通
	{20,  CAN_SJW_1tq,CAN_BS1_6tq, CAN_BS2_2tq,200},		//20k //未通
	{25,  CAN_SJW_1tq,CAN_BS1_6tq, CAN_BS2_8tq,112},		//25k  未通
	{40,  CAN_SJW_1tq,CAN_BS1_6tq, CAN_BS2_2tq,100},		//40k  未通
	{50,  CAN_SJW_1tq,CAN_BS1_6tq, CAN_BS2_8tq,56},			//50k	ok
	{62,  CAN_SJW_1tq,CAN_BS1_13tq,CAN_BS2_2tq,36},			//62.5k
	{80,  CAN_SJW_1tq,CAN_BS1_6tq, CAN_BS2_2tq,50},			//80k   未通
	{100, CAN_SJW_1tq,CAN_BS1_6tq, CAN_BS2_8tq,28},			//100K	ok
	{125, CAN_SJW_1tq,CAN_BS1_13tq, CAN_BS2_2tq,18},		//125K 未通
	{200, CAN_SJW_1tq,CAN_BS1_6tq, CAN_BS2_8tq,14},			//200K  ok
	{250, CAN_SJW_1tq,CAN_BS1_15tq,CAN_BS2_5tq,8},		    //250k  ok
	{400, CAN_SJW_1tq,CAN_BS1_15tq, CAN_BS2_5tq,5},			//400K  ok
	{500, CAN_SJW_1tq,CAN_BS1_15tq,CAN_BS2_5tq,4},			//500K	ok
	{666, CAN_SJW_1tq,CAN_BS1_5tq, CAN_BS2_2tq,8},			//未通
	{800, CAN_SJW_1tq,CAN_BS1_8tq, CAN_BS2_3tq,14},			//800K 未通
	{1000,CAN_SJW_1tq,CAN_BS1_15tq,CAN_BS2_5tq,2},			//1000K	ok
};


void CAN_Configuration(void)
{
	GPIO_InitTypeDef  GPIO_InitStructure;
	CAN_InitTypeDef        CAN_InitStructure;
	CAN_FilterInitTypeDef  CAN_FilterInitStructure;
	/* CAN GPIOs configuration **************************************************/

	/* Enable GPIO clock */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

	/* Configure CAN RX and TX pins */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 ;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
	GPIO_Init(GPIOD, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
	GPIO_Init(GPIOD, &GPIO_InitStructure);

	/* Connect CAN pins to AF9 */
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_CAN1);
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_CAN1); 

	/* CAN configuration ********************************************************/  
	/* Enable CAN clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE);

	/* CAN register init */
	CAN_DeInit(CAN1);
	CAN_StructInit(&CAN_InitStructure);

	/* CAN cell init */
	CAN_InitStructure.CAN_TTCM = DISABLE;
	CAN_InitStructure.CAN_ABOM = DISABLE;
	CAN_InitStructure.CAN_AWUM = DISABLE;
	CAN_InitStructure.CAN_NART = DISABLE;
	CAN_InitStructure.CAN_RFLM = DISABLE;
	CAN_InitStructure.CAN_TXFP = DISABLE;
	CAN_InitStructure.CAN_Mode = CAN_Mode_Normal;

	CAN_Baud_Process(250,&CAN_InitStructure);
	CAN_Init(CAN1, &CAN_InitStructure);

	CAN_FilterInitStructure.CAN_FilterNumber = 0;	   //CAN1滤波器号从0到13

	CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdMask;	   //滤波屏蔽模式
	CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
	CAN_FilterInitStructure.CAN_FilterIdHigh = 0x0000;
	CAN_FilterInitStructure.CAN_FilterIdLow = 0x0000;
	CAN_FilterInitStructure.CAN_FilterMaskIdHigh = 0x0000;	//不屏蔽任何ID
	CAN_FilterInitStructure.CAN_FilterMaskIdLow = 0x0000;		//不屏蔽任何ID
	CAN_FilterInitStructure.CAN_FilterFIFOAssignment = 0;	  // /*!< Specifies the FIFO (0 or 1) which will be assigned to the filter.
													  //This parameter can be a value of @ref CAN_filter_FIFO */
	CAN_FilterInitStructure.CAN_FilterActivation = ENABLE;
	CAN_FilterInit(&CAN_FilterInitStructure); 

	/* Enable FIFO 0 message pending Interrupt */
	CAN_ITConfig(CAN1, CAN_IT_FMP0, ENABLE);

}

/***********************************************************************
函数名称：CCAN_Baud_Process(unsigned int Baud,CAN_InitTypeDef *CAN_InitStructure)
功    能：计算波特率，返回
编写时间：2013.4.25
编 写 人：
注    意：CAN时钟为42M
CAN_SJW : CAN_SJW_1tq - CAN_SJW_4tq	  不能比任何一相位缓冲段长
CAN_BS1 : CAN_BS1_1tq - CAN_BS1_16tq
CAN_BS2 : CAN_BS2_1tq - CAN_BS2_8tq
CAN_Prescaler : 1 - 1024
	配置说明：
CAN_SJW + CAN_BS1 / (CAN_SJW + CAN_BS1 + CAN_BS2)
	0.75     baud > 800k
	0.80     baud > 500k
	0.875    baud <= 500k
	baud = 42M / (CAN_SJW + CAN_BS1 + CAN_BS2) / CAN_Prescaler
***********************************************************************/
void CAN_Baud_Process(unsigned int Baud,CAN_InitTypeDef *CAN_InitStructure)
{
	unsigned int i = 0;
	for(i = 0;i < CAN_BAUD_NUM;i ++)
	{
		if(Baud == CAN_baud_table[i][0])
		{
			CAN_InitStructure->CAN_SJW = CAN_baud_table[i][1];
			CAN_InitStructure->CAN_BS1 = CAN_baud_table[i][2];
			CAN_InitStructure->CAN_BS2 = CAN_baud_table[i][3];
			CAN_InitStructure->CAN_Prescaler = CAN_baud_table[i][4];
			return;	
		}
	}	
}


/***********************************************************************
函数名称：CAN1_WriteData(void)
功    能：CAN1发送函数
输入参数：ID和CAN1_data
输出参数：
编写时间：
编 写 人：
注    意： 扩展数据帧，8字节长度，ID
***********************************************************************/
void CAN1_WriteData(unsigned int ID,unsigned char* buf)
{
		
	
	u16 i;
	uint8_t transmit_mailbox = 0;
	CanTxMsg TxMessage;
	
	TxMessage.ExtId = ID;
	TxMessage.IDE = CAN_ID_EXT;
	TxMessage.RTR = CAN_RTR_DATA; /* 设置为数据帧 */
	TxMessage.DLC = 8;            /* 数据长度, can报文规定最大的数据长度为8字节 */
	
	//Progress(buf);
	for(i = 0;i < 8; i ++)
	{
		TxMessage.Data[i] = buf[i];//发送数据
	}
	
	transmit_mailbox = CAN_Transmit(CAN1,&TxMessage);  /* 返回这个信息请求发送的邮箱号0,1,2或没有邮箱申请发送no_box */	
	while((CAN_TransmitStatus(CAN1, transmit_mailbox)  !=  CANTXOK) && (i !=  0xFFFF))
	{
		i ++;
	}
}



//针对智嵌16路继电器 低字节代表奇数序号继电器，高字节代表偶数，并且自认0或1 
//这里用一个16位数据表示16个继电器，1动作，0不动作
//下发数据即可，函数内会进行关 或开的判断
unsigned char data[8]={0,0,0,0,0,0,0,0};//用于存放要发送的数据
void CAN_data(u16 a)
{
	int i;
	u16 cmd,sta_now;

	cmd = a;
	switch (cmd)  //标志位设置，发送给上位机显示
	{
		case LEFT_LIGHT_HAL: 
		{
			swap_str.swap_sta_flag |= 0x0001;//开左转向灯
			break;
		}
		case CLO_LEFT_LIGHT:
		{	
			swap_str.swap_sta_flag &= 0xfffe;//关左转向灯
			break;
		}

		case RIGHT_LIGHT_HAL: 
		{
			swap_str.swap_sta_flag |= 0x0002;
			break;
		}
		case CLO_RIGHT_LIGHT: 
		{
			swap_str.swap_sta_flag &= 0XFFFD;
			break;
		}

		case FOR_LIGHT_HAL: 
		{
			swap_str.swap_sta_flag |= 0x0004;
			break;
		}
		case CLO_FOR_LIGHT: 
		{
			swap_str.swap_sta_flag &= 0XFFFB;
			break;
		}


		case CLEAN_DUST_HAL: 
		{
			swap_str.swap_sta_flag |= 0x0008;
			break;
		}
		case CLO_CLEAN_DUST: 
		{
			swap_str.swap_sta_flag &= 0XFFF7;
			break;
		}


		case WATER_MOTOR_HAL: 
		{
			swap_str.swap_sta_flag |= 0x0010;
			break;
		}
		case CLO_WATER_MOTOR: 
		{
			swap_str.swap_sta_flag &= 0XFFEF;
			break;
		}


		case WARNING_LIGHT_HAL: 
		{
			swap_str.swap_sta_flag |= 0x0020;
			break;
		}
		case CLO_WARNING_LIGHT: 
		{
			swap_str.swap_sta_flag &= 0XFFDF;
			break;
		}


		case BRUSH_STA_HAL: 
		{
			swap_str.swap_sta_flag |= 0x0040;
			break;
		}
		case CLO_BRUSH_STA: 
		{
			swap_str.swap_sta_flag &= 0XFFBF;
			break;
		}


		case LOUTD_HAL: 
		{
			swap_str.swap_sta_flag |= 0x0080;
			break;
		}
		case CLO_LOUTD: 
		{
			swap_str.swap_sta_flag &= 0XFF7F;
			break;
		}
		case WITDH_LIGHT: 
		{
			swap_str.swap_sta_flag |= 0x0200;
			break;
		}
		case CLO_WITDH_LIGHT: 
		{
			swap_str.swap_sta_flag &= 0XFDFF;
			break;
		}
		case BACK_LOUD: 
		{
			swap_str.swap_sta_flag &= 0XFDFF;
			break;
		}
		case CLO_BACK_LOUD: 
		{
			swap_str.swap_sta_flag &= 0XFDFF;
			break;
		}
		case TAIL_LIGHT: 
		{
			swap_str.swap_sta_flag &= 0XFDFF;
			break;
		}
		case CLO_TAIL_LIGHT: 
		{
			swap_str.swap_sta_flag &= 0XFDFF;
			break;
		}

		default:break;


	}
		

	if((a == TURN_UNLOCK)||(a == TAIL_LIGHT)||(a == BACK_LOUD)||(a == WITDH_LIGHT)||(a == LEFT_LIGHT_HAL)||(a == RIGHT_LIGHT_HAL)||(a == FOR_LIGHT_HAL)||(a == CLEAN_DUST_HAL)||(a == WATER_MOTOR_HAL)||(a == WARNING_LIGHT_HAL)||(a == BRUSH_STA_HAL)||(a == LOUTD_HAL)||(a == LOUTD_BACK))
	{
		last_swap_swap |= a;//如果是打开，就或操作
	}



	if((a == CLO_TURN_UNLOCK)||(a == 0x0000)||(a == CLO_WITDH_LIGHT)||(a == CLO_BACK_LOUD)||(a == CLO_TAIL_LIGHT)||(a == CLO_LEFT_LIGHT)||(a == CLO_RIGHT_LIGHT)||(a == CLO_FOR_LIGHT)||(a == CLO_CLEAN_DUST)||(a == CLO_WATER_MOTOR)||(a == CLO_WARNING_LIGHT)||(a == CLO_BRUSH_STA)||(a == CLO_LOUTD)||(a == CLO_LOUTD_BACK))
	{

		last_swap_swap &= a;//如果是关，就与操作

	}

	sta_now = last_swap_swap;//sta_now作为实际操作数，last_swap_swap用来保存目前和之前的状态

	for(i=0;i<8;i++)
	{
		if(sta_now&0x0003)
		{
			if((sta_now&0x0003)==0x0001)data[i]=0x01;  //一个字节代表两个继电器
			else if((sta_now&0x0003)==0x0002)data[i]=0x10;
			else if((sta_now&0x0003)==0x0003)data[i]=0x11;
		}else data[i]=0x00;
		sta_now = sta_now>>2;//一个字节代表两个继电器，所以每次移动两位
	}
	CAN1_WriteData(0x00AA5701,data);

}


