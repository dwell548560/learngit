#include "accelerate.h"

ACCELERATE_TYPE  acce_data;

void Accelerate_ADC_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;
	ADC_CommonInitTypeDef ADC_CommonInitStructure;
	ADC_InitTypeDef ADC_InitStructure;
	//??? ADC ? GPIO ???????? GPIO
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);//?? GPIOA ??
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE); //?? ADC1 ??
	//???? ADC1 ?? 5 IO ?
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;//PA5 ?? 5
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;//????
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;//?????
	GPIO_Init(GPIOA, &GPIO_InitStructure);//???
	RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1,ENABLE);  //ADC1 ??
	RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1,DISABLE);  //???? 
	
	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;//????
	ADC_CommonInitStructure.ADC_TwoSamplingDelay =
	ADC_TwoSamplingDelay_5Cycles;//??????????? 5 ???
	ADC_CommonInitStructure.ADC_DMAAccessMode =
	ADC_DMAAccessMode_Disabled; //DMA ??
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div4;//??? 4 ???
	//ADCCLK=PCLK2/4=84/4=21Mhz,ADC ???????? 36Mhz
	ADC_CommonInit(&ADC_CommonInitStructure);//???
	

	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;//12 ???
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;//?????
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;//??????
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
	//??????,??????
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;//??? 
	ADC_InitStructure.ADC_NbrOfConversion = 1;//1 ?????????
	ADC_Init(ADC1, &ADC_InitStructure);//ADC ???
	//??? ADC ??

	ADC1->CR2|=0x00000300;//开启DMA模式和DMA禁止选择，是CR2的 位8 和位9置1
	ADC_Cmd(ADC1, ENABLE);//?? AD ???

}


void Accelerate_DMA(void)
{
	DMA_InitTypeDef DMA_InitStructure;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE); 
	
	DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)(&ADC1->DR);	
  // 存储器地址，实际上就是一个内部SRAM的变量	
	DMA_InitStructure.DMA_Memory0BaseAddr = (u32)acce_data.accelerate_re;  //内存地址
  // 数据传输方向为外设到存储器	
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;	
	// 缓冲区大小为，指一次传输的数据量
	DMA_InitStructure.DMA_BufferSize = ACCELERATE_ADC_NUM;//
	// 外设寄存器只有一个，地址不用递增
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  // 存储器地址固定
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; //存储器地址增加
  // // 外设数据大小为半字，即两个字节 
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord; 
  //	存储器数据大小也为半字，跟外设数据大小相同
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;	
	// 循环传输模式
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
  // DMA 传输通道优先级为高，当使用一个DMA通道时，优先级设置不影响
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
  // 禁止DMA FIFO	，使用直连模式
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;  
  // FIFO 大小，FIFO模式禁止时，这个不用配置	
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;  
	// 选择 DMA 通道，通道存在于流中
	DMA_InitStructure.DMA_Channel = DMA_Channel_0; 
  //初始化DMA流，流相当于一个大的管道，管道里面有很多通道
	DMA_Init(DMA2_Stream0, &DMA_InitStructure);
	// 使能DMA流
	DMA_Cmd(DMA2_Stream0, ENABLE);


}




void ADC_average_handle(u8 * ave_data)
{
	u8 i;
	float sum = 0;
	for(i = 0 ;i < ACCELERATE_ADC_NUM; i++)
	{
		sum += *(ave_data+i);
	}

	acce_data.adc_result = sum/ACCELERATE_ADC_NUM;

}